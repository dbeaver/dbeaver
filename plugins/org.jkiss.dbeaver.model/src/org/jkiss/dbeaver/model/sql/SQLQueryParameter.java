/*
 * DBeaver - Universal Database Manager
 * Copyright (C) 2010-2016 Serge Rieder (serge@jkiss.org)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (version 2)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package org.jkiss.dbeaver.model.sql;

import org.jkiss.code.NotNull;
import org.jkiss.dbeaver.model.DBPDataKind;
import org.jkiss.dbeaver.model.DBUtils;
import org.jkiss.dbeaver.model.data.DBDDisplayFormat;
import org.jkiss.dbeaver.model.data.DBDValueHandler;
import org.jkiss.dbeaver.model.struct.DBSAttributeBase;
import org.jkiss.dbeaver.model.struct.DBSDataType;

/**
 * SQL statement parameter info
 */
public class SQLQueryParameter implements DBSAttributeBase {
    private DBDValueHandler valueHandler;
    private DBSDataType paramType;
    private int ordinalPosition;
    private String name;
    private Object value;
    private int tokenOffset;
    private int tokenLength;
    private SQLQueryParameter previous;

    public SQLQueryParameter(int ordinalPosition, String name, int tokenOffset, int tokenLength)
    {
        this.ordinalPosition = ordinalPosition;
        this.name = name.trim();
        this.tokenOffset = tokenOffset;
        this.tokenLength = tokenLength;
    }

    public boolean isResolved()
    {
        return valueHandler != null;
    }

    public boolean isNamed() {
        return !name.equals("?");
    }

    public void resolve()
    {
        if (paramType == null) {
            return;
        }
        this.valueHandler = DBUtils.findValueHandler(
            paramType.getDataSource(),
            paramType.getDataSource().getContainer(),
            paramType);
    }

    public int getTokenOffset() {
        return tokenOffset;
    }

    public int getTokenLength() {
        return tokenLength;
    }

    public SQLQueryParameter getPrevious() {
        return previous;
    }

    public void setPrevious(SQLQueryParameter previous) {
        this.previous = previous;
    }

    public DBDValueHandler getValueHandler()
    {
        return valueHandler;
    }

    public DBSDataType getParamType()
    {
        return paramType;
    }

    public void setParamType(DBSDataType paramType)
    {
        this.paramType = paramType;
    }

    public int getOrdinalPosition()
    {
        return ordinalPosition;
    }

    @NotNull
    @Override
    public String getName()
    {
        return name;
    }

    public boolean isNotNull()
    {
        return false;
    }

    @Override
    public long getMaxLength()
    {
        return 0;
    }

    public Object getValue()
    {
        return value;
    }

    public void setValue(Object value)
    {
        this.value = value;
    }

    @Override
    public String toString()
    {
        return getTitle() + "=" + (isResolved() ? valueHandler.getValueDisplayString(this, value, DBDDisplayFormat.UI) : "?");
    }

    public String getTitle()
    {
        if (name.startsWith(":")) {
            return name.substring(1);
        } else {
            return name;
        }
    }

    @Override
    public String getTypeName()
    {
        return paramType == null ? "" : paramType.getName();
    }

    @Override
    public int getTypeID()
    {
        return paramType == null ? -1 : paramType.getTypeID();
    }

    @Override
    public DBPDataKind getDataKind()
    {
        return paramType.getDataKind();
    }

    @Override
    public int getScale()
    {
        return paramType == null ? 0 : paramType.getScale();
    }

    @Override
    public int getPrecision()
    {
        return paramType == null ? 0 : paramType.getPrecision();
    }

    @Override
    public boolean isRequired()
    {
        return false;
    }

    @Override
    public boolean isAutoGenerated() {
        return false;
    }

    @Override
    public boolean isPseudoAttribute() {
        return false;
    }
}
