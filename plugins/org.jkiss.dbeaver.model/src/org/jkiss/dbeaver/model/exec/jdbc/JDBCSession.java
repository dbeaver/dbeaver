/*
 * DBeaver - Universal Database Manager
 * Copyright (C) 2010-2016 Serge Rieder (serge@jkiss.org)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (version 2)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package org.jkiss.dbeaver.model.exec.jdbc;

import org.jkiss.code.NotNull;
import org.jkiss.code.Nullable;
import org.jkiss.dbeaver.model.exec.DBCException;
import org.jkiss.dbeaver.model.exec.DBCSession;
import org.jkiss.dbeaver.model.exec.DBCStatementType;
import org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.concurrent.Executor;

/**
 * JDBC session
 */
public interface JDBCSession extends DBCSession, Connection {

    @NotNull
    JDBCDataSource getDataSource();

    Connection getOriginal()
        throws SQLException;

    @Override
    @NotNull
    JDBCStatement prepareStatement(
        @NotNull DBCStatementType type,
        @NotNull String query,
        boolean scrollable,
        boolean updatable,
        boolean returnGeneratedKeys) throws DBCException;

    @Override
    @NotNull
    JDBCDatabaseMetaData getMetaData()
        throws SQLException;

    @Override
    @NotNull
    JDBCStatement createStatement()
        throws SQLException;

    @Override
    @NotNull
    JDBCStatement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql)
        throws SQLException;

    @Override
    @NotNull
    JDBCCallableStatement prepareCall(String sql)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
        throws SQLException;

    @Override
    @NotNull
    JDBCCallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        throws SQLException;

    @Override
    @NotNull
    JDBCCallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql, int[] columnIndexes)
        throws SQLException;

    @Override
    @NotNull
    JDBCPreparedStatement prepareStatement(String sql, String[] columnNames)
        throws SQLException;

    @Override
    void close();

    ////////////////////////////////////////////////////////////////////////////
    // JDBC 1.7

    @Nullable
    @Override
    String getSchema() throws SQLException;

    @Override
    void setSchema(String schema) throws SQLException;

    @Override
    void abort(Executor executor) throws SQLException;

    @Override
    void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException;

    @Override
    int getNetworkTimeout() throws SQLException;
}
