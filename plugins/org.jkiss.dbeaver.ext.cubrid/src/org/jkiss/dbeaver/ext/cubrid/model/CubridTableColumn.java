/*
 * DBeaver - Universal Database Manager
 * Copyright (C) 2010-2024 DBeaver Corp and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jkiss.dbeaver.ext.cubrid.model;

import org.jkiss.code.NotNull;
import org.jkiss.code.Nullable;
import org.jkiss.dbeaver.DBException;
import org.jkiss.dbeaver.ext.cubrid.CubridConstants;
import org.jkiss.dbeaver.ext.generic.model.GenericTableBase;
import org.jkiss.dbeaver.ext.generic.model.GenericTableColumn;
import org.jkiss.dbeaver.model.exec.jdbc.JDBCResultSet;
import org.jkiss.dbeaver.model.impl.jdbc.JDBCUtils;
import org.jkiss.dbeaver.model.meta.Property;
import org.jkiss.utils.CommonUtils;

public class CubridTableColumn extends GenericTableColumn
{
    public CubridTableColumn(@NotNull GenericTableBase table, @NotNull JDBCResultSet dbResult) throws DBException {
        super(table);
        if (dbResult != null) {
            typeName = JDBCUtils.safeGetString(dbResult, "Type");
            setName(JDBCUtils.safeGetString(dbResult, "Field"));
            setDataType(typeName);
            setRequired(JDBCUtils.safeGetString(dbResult, "Null").equals("NO"));
            setDescription(JDBCUtils.safeGetString(dbResult, CubridConstants.COMMENT));
            setDefaultValue(JDBCUtils.safeGetString(dbResult, "Default"));
            setAutoIncrement(JDBCUtils.safeGetString(dbResult, "Extra").equals("auto_increment"));
            setPersisted(true);
        }
    }

    public void setDataType(@NotNull String fullTypeName) throws DBException {
        int divPos = fullTypeName.indexOf("(");
        int divPos2 = fullTypeName.indexOf(")", divPos);
        if (divPos == -1 && divPos2 == -1) {
            setFullTypeName(fullTypeName);
        } else {
            String length = fullTypeName.substring(divPos+1, divPos2);
            if (CommonUtils.isInt(length)) {
                setFullTypeName(fullTypeName);
            } else {
                setTypeName(fullTypeName);
            }
        }
    }

    @NotNull
    @Override
    @Property(viewable = true, editable = true, updatable = true, order = 20, listProvider = ColumnTypeNameListProvider.class)
    public String getTypeName() {
        return super.getTypeName();
    }

    @Nullable
    @Override
    @Property(viewable = true, editable = true, updatable = true, order = 40)
    public long getMaxLength() {
        return super.getMaxLength();
    }

    @NotNull
    @Override
    @Property(viewable = true, editable = true, updatable = true, order = 50)
    public boolean isRequired() {
        return super.isRequired();
    }

    @Nullable
    @Override
    @Property(viewable = true, editable = true, updatable = true, order = 70)
    public String getDefaultValue() {
        return super.getDefaultValue();
    }

    @Override
    @Property(hidden = true)
    public int getOrdinalPosition() {
        return 0;
    }

    @Override
    @Property(hidden = true)
    public boolean isInUniqueKey() {
        return false;
    }

    @Override
    @Property(hidden = true)
    public Integer getScale() {
        return null;
    }

    @Override
    @Property(hidden = true)
    public Integer getPrecision() {
        return null;
    }

    @Override
    @Property(hidden = true)
    public boolean isAutoGenerated() {
        return false;
    }

    @Override
    @Property(hidden = true)
    public int getRadix() {
        return 0;
    }
}
